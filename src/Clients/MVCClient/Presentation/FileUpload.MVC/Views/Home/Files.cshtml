@using FileUpload.MVC.Application.Dtos.Files.Pager
@{
    ViewData["Title"] = "Home Page";
}

@model FilesPagerViewModel

<div class="container" id="app">

    <table class="table table-striped table-bordered">
        <tr>
            <th>File Id</th>
            <th>File Name</th>
            <th>Direct Link</th>
        </tr>

        <tr v-for="(item, index) in datas" :key="index">
            <td>{{item.id}}</td>
            <td>{{item.fileName}}</td>
            <td>
                <button @@click.prevent="Download(item.id)" class="btn btn-primary btn-sm">
                    İndir
                </button>
                <button class="btn btn-sm btn-danger" @@click.prevent="deleteFile(item.id)">Sil</button>
            </td>
        </tr>
    </table>


    <nav v-if="pageInfo.totalItems" aria-label="Page navigation example" class="d-flex flex-row justify-content-center">
        <ul class="pagination">

            <li class="page-item"><a @@click.prevent="getData(pageInfo.currentPage-1)" class="btn page-link" :class="{'disabled': pageInfo.currentPage == 1}">Prev</a></li>

            <li v-for="index in pageInfo.endPage" :key="index" class="page-item" :class="{'active': pageInfo.currentPage == index}">
                <a @@click.prevent="getData(index)" class="btn page-link">{{index}}</a>
            </li>
            <li class="page-item"><a @@click.prevent="getData(pageInfo.currentPage+1)" class="btn page-link" :class="{'disabled': pageInfo.currentPage == pageInfo.totalPage}">Next</a></li>
        </ul>
    </nav>


    <div class="card">
        <div class="card-body">
            <div class="form-check" v-for="(category, index) in categories" :key="category.id">
                <input class="form-check-input" type="checkbox" :value="category.id" v-model="filter.CategoryIds" :id="index" @@change="filterData">
                <label class="form-check-label" :for="index">
                    {{ category.title }} ({{category.count}})
                </label>
            </div>

        </div>
    </div>




</div>

@section Scripts {

@await Html.PartialAsync("_VueJsPartial")

<script>

    const app = {
        data() {
            return {

                datas: @Html.Raw(Json.Serialize(Model.Files)),
                pageInfo: @Html.Raw(Json.Serialize(Model.Pages)),
                categories: @Html.Raw(Json.Serialize(Model.Categories)),
                filter: {Page:1, PageSize:10, OrderBy:1, Extension:"", CategoryIds: []}
            }
        },

        created()
        {
            this.getQuery();
        },

        methods: {


             getQuery()

             {
                let urlParams = new URLSearchParams(window.location.search);

                if (urlParams.has('page'))
                {
                    this.filter.Page = urlParams.get('page');
                }
                if (urlParams.has('pageSize'))
                {
                    this.filter.PageSize = urlParams.get('pageSize');
                }
                if (urlParams.has('orderBy'))
                {
                    this.filter.OrderBy = urlParams.get('orderBy');
                }
                if (urlParams.has('extension'))
                {
                    this.filter.Extension = urlParams.get('extension');
                }

            },

            getData(e) {

             this.filter.Page = e;
             this.filterData();

            },

        filterData(){
                axios({
                method: "post",
                url:"/myfiles",
                data: this.filter,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
            }).then(response => {

                if (response.data)
                {
                   this.datas = response.data.files
                   this.pageInfo = response.data.pages
                   this.categories = response.data.categories
                }
                else
                {
                    alert("hata");
                }
            });
        },


            deleteFile(id) {

                axios({
                    method: "post",
                    url:`/Home/Delete/${id}`,
                    data: this.filter,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                }).then(response => {
                    if (response.data.isSuccessful)
                    {
                       this.datas = this.datas.filter(data => data.id != id);

                        if (response.data.value.file != null)
                        {
                             this.datas.push(
                             {
                                id: response.data.value.file.id,
                                fileName: response.data.value.file.fileName,
                                size: response.data.value.file.size,
                                uploadedDate: response.data.value.file.uploadedDate,
                            });
                        }

                          this.pageInfo = response.data.value.pages
                          this.categories = response.data.value.categories
                    }
                    else
                    {
                        alert("hata");

                    }
                });
            },

            Download(id) {
                axios({
                    method: "get",
                    url:`/Home/GetLink/${id}`,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                }).then(response => {
                    console.log(response);

                    if (response.data) {
                        window.location.href = response.data;
                    }

                });
            }
        },
    }
    Vue.createApp(app).mount('#app');
</script>

}
