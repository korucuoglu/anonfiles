@using FileUpload.MVC.Application.Dtos.Categories
@model List<GetCategoryDto>
@{
    ViewData["Title"] = "Home Page";
}

<div id="app">
    <div class="w-full justify-center items-center flex p-4 overflow-auto flex-col">
        <div class="lg:w-1/2 w-full">
            <form class="flex items-center space-x-6 mb-6 justify-between">
                <label class="block self-start">
                    <span class="sr-only">Dosya Seç</span>
                    <input type="file" multiple @@change="getInputFiles($event)"
                           class="block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-green-200 file:text-green-600 hover:file:bg-green-600 hover:file:text-white" />
                </label>
            </form>
        </div>
        <table class="border-collapse table-fixed lg:w-1/2 w-full text-sm">
            <thead>
                <tr>
                    <th class="border-b dark:border-slate-600 font-medium md:p-4 p-2 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">
                        File Name
                    </th>
                    <th class="border-b dark:border-slate-600 font-medium md:p-4 p-2 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">
                        Size
                    </th>
                    <th class="border-b dark:border-slate-600 font-medium md:p-4 p-2 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">
                        Status
                    </th>
                    <th class="border-b dark:border-slate-600 font-medium md:p-4 p-2 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in datas" :key="item.file.name">
                    <td class="border-b border-slate-100 dark:border-slate-700 md:p-4 p-2 text-slate-500 dark:text-slate-400 pl-2">
                        {{ item.file.name }}
                    </td>
                    <td class="border-b border-slate-100 dark:border-slate-700 md:p-4 p-2 text-slate-500 dark:text-slate-400">
                        {{ item.file.size }} byte
                    </td>
                    <td class="border-b border-slate-100 dark:border-slate-700 md:p-4 p-2 text-slate-500 dark:text-slate-400">
                        {{ item.status }}
                    </td>
                    <td class="border-b border-slate-100 dark:border-slate-700 md:p-4 p-2 text-slate-500 dark:text-slate-400 overflow text-right">
                        <a v-if="item.status != 'Loaded'" @@click.prevent="deleteFile(item)"
                           :disabled="item.status == 'Starting'"
                           class="px-4 py-1 text-md text-red-600 font-semibold rounded-sm border border-red-600 hover:text-white hover:bg-red-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 disabled:bg-red-100">
                            Delete
                        </a>

                        <a v-if="item.status == 'Loaded'" @@click.prevent="Download(item.fileId)"
                           class="px-4 py-1 text-md text-green-600 font-semibold rounded-sm border border-green-600 hover:text-white hover:bg-green-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-offset-2">
                            Indir
                        </a>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="flex lg:w-1/2 w-full justify-end mt-10 mb-16">
            <button @@click.prevent="addDocs" v-if="datas.length > 0 && uploadButtonActive"
                    class="px-4 py-1 text-md text-blue-400 font-semibold rounded-sm border border-blue-400 hover:text-white hover:bg-blue-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2">
                Upload ({{ datas.length }})
            </button>
        </div>
    </div>


    <div class="card">
        <div class="card-body">
            <div class="form-check" v-for="(category, index) in categories" :key="category.id">
                <input class="form-check-input" type="checkbox" :value="category.id" v-model="checkedCategories" :id="index">
                <label class="form-check-label" :for="index">
                    {{ category.title }}
                </label>
            </div>

        </div>
    </div>

    <form>
        <div class="mb-3">
            <label class="form-label">Kategori Adı</label>
            <input type="text" class="form-control" v-model="newCategory">
        </div>
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @@click.prevent="AddCategory()">Kaydet</button>
    </form>


</div>



@section ScriptsHead {
<partial name="_TailwindPartial" />
}

@section Scripts {

<partial name="_SignalRPartial" />
<partial name="_VueJsPartial" />

<script type="text/javascript">

        const app = {
            data(){
                return {
                    categories: @Html.Raw(Json.Serialize(Model)),
                    checkedCategories: [],
                    newCategory: "",
                    datas: [],
                    SignalRConnection: "http://localhost:5002/fileHub",
                    uploadButtonActive: true

                }
            },

            methods: {

                AddCategory(){

                    axios({
                        method: "post",
                        url:  "/Home/AddCategory",
                        data: {"Title": this.newCategory},
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                    }).then(response => {

                        console.log(response);
                    });

                },

                Download(fileId) {

                    axios({
                        method: "get",
                        url: "/Home/GetLink/" + fileId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                    }).then(response => {
                        if (response.data.isSuccessful) {
                            window.location.href = response.data.data;
                        }

                    });
                },

                getInputFiles(event) {
                    for (let i = 0; i < event.target.files.length; i++) {

                        this.datas.push({
                            fileId: "",
                            status: "Unstarted",
                            message: "",
                            file: event.target.files[i],
                        });
                    }
                },

                deleteFile(file) {
                    this.datas = [...this.datas].filter((inputFile) => inputFile != file);
                },

                addDocs(e) {

                    this.uploadButtonActive = false
                    var formData = new FormData();

                    for (var i = 0; i < this.datas.length; i++) {
                        formData.append("files", this.datas[i].file);
                    }

                    for (var i = 0; i < this.checkedCategories.length; i++) {
                      formData.append(`CategoriesId`, this.checkedCategories[i]);
                    }


                    axios({
                        method: "post",
                        url: "/home/upload",
                        data: formData,
                        contentType: "multipart/form-data",
                        dataType: "json",
                    });
                },

            },

            created() {

                const connection = new signalR.HubConnectionBuilder()
                    .withUrl(this.SignalRConnection)
                    .configureLogging(signalR.LogLevel.Information)
                    .build();


                connection.on("FilesUploaded", function (model) {
                    filesUploadedFunction(model);
                });

                const filesUploadedFunction = (model) => {

                    const data = this.datas.find(data => data.status == 'Starting');
                    if (model.isSuccessful) {
                        data.status = 'Loaded';
                        data.fileId = model.data.fileId;
                    } else {
                        data.status = 'Error';
                    }
                };

                connection.on("FilesUploadStarting", function (fileName) {

                    startFileUploading(fileName);
                });


                const startFileUploading = (fileName) => {
                    const data = this.datas.find((data) => data.file.name == fileName);
                    data.status = 'Starting';
                }


                connection.start()
                    .then(function () {

                    })
                    .catch(error => {
                        console.error(error.message);
                    });
            },
        }

            Vue.createApp(app).mount('#app');



</script>


}


