// <auto-generated />
using System;
using FileUpload.Upload.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FileUpload.Upload.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e4068fe-9039-43d6-be7d-3edbdc72d262"),
                            ApplicationUserId = new Guid("9153ce3e-981b-4b31-96b4-3909cb235970"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8318),
                            Title = "Ödevler"
                        },
                        new
                        {
                            Id = new Guid("cfc2ce26-e6ef-4738-8c39-4d9bbb4b1f6c"),
                            ApplicationUserId = new Guid("9153ce3e-981b-4b31-96b4-3909cb235970"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8323),
                            Title = "Tasarımlar"
                        },
                        new
                        {
                            Id = new Guid("6ead4aa2-f507-4338-867f-520fc594d4cc"),
                            ApplicationUserId = new Guid("9153ce3e-981b-4b31-96b4-3909cb235970"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8325),
                            Title = "Dosyalar"
                        },
                        new
                        {
                            Id = new Guid("e986849b-6ea4-4515-80a2-6c227dcdab69"),
                            ApplicationUserId = new Guid("a08e956a-de0a-4206-b1f2-fbc2b2e81ece"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8326),
                            Title = "Ödevler"
                        },
                        new
                        {
                            Id = new Guid("eafe6da8-36b4-447a-b188-dfdc95bfb42d"),
                            ApplicationUserId = new Guid("a08e956a-de0a-4206-b1f2-fbc2b2e81ece"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8327),
                            Title = "Tasarımlar"
                        },
                        new
                        {
                            Id = new Guid("f1efe9f4-3436-4a6d-9aeb-156f21d033de"),
                            ApplicationUserId = new Guid("a08e956a-de0a-4206-b1f2-fbc2b2e81ece"),
                            CreatedDate = new DateTime(2022, 3, 20, 13, 12, 52, 37, DateTimeKind.Utc).AddTicks(8329),
                            Title = "Dosyalar"
                        });
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.FileCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("FilesCategories");
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsedSpace")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("FileUpload.Upload.Persistence.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("35ca5fd2-8f0b-4cf9-a349-3e1dfb532c91"),
                            ConcurrencyStamp = "afdf8c4d-825e-445d-b091-21a720a8ffc8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("5552d2f5-1fcd-4d97-9f78-680de524e89c"),
                            ConcurrencyStamp = "afef254e-f3d3-4bf6-bf2e-381f5f4260fe",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("FileUpload.Upload.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9153ce3e-981b-4b31-96b4-3909cb235970"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c540139e-e4f8-4180-822f-ca493917208a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENdCmHSocqUQ8inylOewcECUarBRevpT8XyBaXAlhdb8+qrRFC9bp6mziNJUjrLGcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f370c505-c642-4478-859e-90f5977832f9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("a08e956a-de0a-4206-b1f2-fbc2b2e81ece"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "704311fb-3b25-4a5f-90cd-a9be34c97005",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMX9tpmGVdryuDO7bNXKoepAnWTgOBaraIINmX3I68kuLHF4wPd5cGmTETZcUrEQQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "327029e3-c320-4bc0-9c7e-2f295d1e399b",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FileUpload.Upload.Persistence.Identity.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9153ce3e-981b-4b31-96b4-3909cb235970"),
                            RoleId = new Guid("35ca5fd2-8f0b-4cf9-a349-3e1dfb532c91")
                        },
                        new
                        {
                            UserId = new Guid("a08e956a-de0a-4206-b1f2-fbc2b2e81ece"),
                            RoleId = new Guid("5552d2f5-1fcd-4d97-9f78-680de524e89c")
                        });
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.Category", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany("Categories")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.File", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany("Files")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.FileCategory", b =>
                {
                    b.HasOne("FileUpload.Upload.Domain.Entities.Category", "Category")
                        .WithMany("FilesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileUpload.Upload.Domain.Entities.File", "File")
                        .WithMany("FilesCategories")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("File");
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.UserInfo", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithOne("UserInfo")
                        .HasForeignKey("FileUpload.Upload.Domain.Entities.UserInfo", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FileUpload.Upload.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.Category", b =>
                {
                    b.Navigation("FilesCategories");
                });

            modelBuilder.Entity("FileUpload.Upload.Domain.Entities.File", b =>
                {
                    b.Navigation("FilesCategories");
                });

            modelBuilder.Entity("FileUpload.Upload.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Files");

                    b.Navigation("UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
