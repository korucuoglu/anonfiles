 var sp_add_file = @"CREATE OR REPLACE PROCEDURE public.add_file(IN filename text, IN filesize bigint, IN filekey text, IN fileuser_id integer, IN categoryids integer[] DEFAULT '{}'::integer[], INOUT file_id integer DEFAULT NULL::integer) LANGUAGE plpgsql AS $procedure$ DECLARE _categoryid int; BEGIN INSERT INTO files (file_name, size, file_key, user_id) values(filename, filesize, filekey, fileuser_id) RETURNING id INTO file_id; UPDATE userinfo SET used_space=used_space+filesize WHERE id = fileuser_id; FOR _categoryid IN SELECT unnest(categoryids) LOOP IF EXISTS (SELECT 1 FROM categories c WHERE c.id = _categoryid AND user_id = fileuser_id) THEN INSERT INTO filecategory (category_id, file_id) VALUES (_categoryid, file_id); ELSE CONTINUE; END IF; END LOOP; COMMIT; END; $procedure$ ;";

  migrationBuilder.Sql(sp_add_file);

  var sp_delete_file = @"CREATE OR REPLACE PROCEDURE public.delete_file(IN fileid integer, IN userid integer) LANGUAGE plpgsql AS $procedure$ DECLARE usedspace int; BEGIN SELECT size INTO usedspace  FROM files WHERE files.id = fileid; DELETE FROM files WHERE files.id = fileid AND files.user_id = userid; UPDATE userinfo SET used_space=used_space-usedspace  WHERE id = userid; COMMIT; END; $procedure$;";
  
  migrationBuilder.Sql(sp_delete_file);
